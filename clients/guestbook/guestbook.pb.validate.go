// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: guestbook.proto

package guestbook

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AddMessageRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddMessageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddMessageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddMessageRequestMultiError, or nil if none found.
func (m *AddMessageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddMessageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	// no validation rules for Message

	// no validation rules for Token

	if len(errors) > 0 {
		return AddMessageRequestMultiError(errors)
	}

	return nil
}

// AddMessageRequestMultiError is an error wrapping multiple validation errors
// returned by AddMessageRequest.ValidateAll() if the designated constraints
// aren't met.
type AddMessageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddMessageRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddMessageRequestMultiError) AllErrors() []error { return m }

// AddMessageRequestValidationError is the validation error returned by
// AddMessageRequest.Validate if the designated constraints aren't met.
type AddMessageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddMessageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddMessageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddMessageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddMessageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddMessageRequestValidationError) ErrorName() string {
	return "AddMessageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddMessageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddMessageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddMessageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddMessageRequestValidationError{}

// Validate checks the field values on AddMessageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddMessageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddMessageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddMessageResponseMultiError, or nil if none found.
func (m *AddMessageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddMessageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return AddMessageResponseMultiError(errors)
	}

	return nil
}

// AddMessageResponseMultiError is an error wrapping multiple validation errors
// returned by AddMessageResponse.ValidateAll() if the designated constraints
// aren't met.
type AddMessageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddMessageResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddMessageResponseMultiError) AllErrors() []error { return m }

// AddMessageResponseValidationError is the validation error returned by
// AddMessageResponse.Validate if the designated constraints aren't met.
type AddMessageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddMessageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddMessageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddMessageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddMessageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddMessageResponseValidationError) ErrorName() string {
	return "AddMessageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddMessageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddMessageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddMessageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddMessageResponseValidationError{}

// Validate checks the field values on GetMessagesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMessagesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMessagesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMessagesRequestMultiError, or nil if none found.
func (m *GetMessagesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMessagesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return GetMessagesRequestMultiError(errors)
	}

	return nil
}

// GetMessagesRequestMultiError is an error wrapping multiple validation errors
// returned by GetMessagesRequest.ValidateAll() if the designated constraints
// aren't met.
type GetMessagesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMessagesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMessagesRequestMultiError) AllErrors() []error { return m }

// GetMessagesRequestValidationError is the validation error returned by
// GetMessagesRequest.Validate if the designated constraints aren't met.
type GetMessagesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMessagesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMessagesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMessagesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMessagesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMessagesRequestValidationError) ErrorName() string {
	return "GetMessagesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetMessagesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMessagesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMessagesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMessagesRequestValidationError{}

// Validate checks the field values on GetMessageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMessageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMessageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMessageResponseMultiError, or nil if none found.
func (m *GetMessageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMessageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetMessageResponseMultiError(errors)
	}

	return nil
}

// GetMessageResponseMultiError is an error wrapping multiple validation errors
// returned by GetMessageResponse.ValidateAll() if the designated constraints
// aren't met.
type GetMessageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMessageResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMessageResponseMultiError) AllErrors() []error { return m }

// GetMessageResponseValidationError is the validation error returned by
// GetMessageResponse.Validate if the designated constraints aren't met.
type GetMessageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMessageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMessageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMessageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMessageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMessageResponseValidationError) ErrorName() string {
	return "GetMessageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetMessageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMessageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMessageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMessageResponseValidationError{}
