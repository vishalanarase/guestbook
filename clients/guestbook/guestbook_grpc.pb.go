// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: guestbook.proto

package guestbook

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GuestbookService_AddMessage_FullMethodName = "/guestbook.GuestbookService/AddMessage"
	GuestbookService_GetMessage_FullMethodName = "/guestbook.GuestbookService/GetMessage"
)

// GuestbookServiceClient is the client API for GuestbookService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GuestbookServiceClient interface {
	AddMessage(ctx context.Context, in *AddMessageRequest, opts ...grpc.CallOption) (*AddMessageResponse, error)
	GetMessage(ctx context.Context, in *GetMessagesRequest, opts ...grpc.CallOption) (*GetMessageResponse, error)
}

type guestbookServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGuestbookServiceClient(cc grpc.ClientConnInterface) GuestbookServiceClient {
	return &guestbookServiceClient{cc}
}

func (c *guestbookServiceClient) AddMessage(ctx context.Context, in *AddMessageRequest, opts ...grpc.CallOption) (*AddMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddMessageResponse)
	err := c.cc.Invoke(ctx, GuestbookService_AddMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guestbookServiceClient) GetMessage(ctx context.Context, in *GetMessagesRequest, opts ...grpc.CallOption) (*GetMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMessageResponse)
	err := c.cc.Invoke(ctx, GuestbookService_GetMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GuestbookServiceServer is the server API for GuestbookService service.
// All implementations must embed UnimplementedGuestbookServiceServer
// for forward compatibility.
type GuestbookServiceServer interface {
	AddMessage(context.Context, *AddMessageRequest) (*AddMessageResponse, error)
	GetMessage(context.Context, *GetMessagesRequest) (*GetMessageResponse, error)
	mustEmbedUnimplementedGuestbookServiceServer()
}

// UnimplementedGuestbookServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGuestbookServiceServer struct{}

func (UnimplementedGuestbookServiceServer) AddMessage(context.Context, *AddMessageRequest) (*AddMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMessage not implemented")
}
func (UnimplementedGuestbookServiceServer) GetMessage(context.Context, *GetMessagesRequest) (*GetMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessage not implemented")
}
func (UnimplementedGuestbookServiceServer) mustEmbedUnimplementedGuestbookServiceServer() {}
func (UnimplementedGuestbookServiceServer) testEmbeddedByValue()                          {}

// UnsafeGuestbookServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GuestbookServiceServer will
// result in compilation errors.
type UnsafeGuestbookServiceServer interface {
	mustEmbedUnimplementedGuestbookServiceServer()
}

func RegisterGuestbookServiceServer(s grpc.ServiceRegistrar, srv GuestbookServiceServer) {
	// If the following call pancis, it indicates UnimplementedGuestbookServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GuestbookService_ServiceDesc, srv)
}

func _GuestbookService_AddMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuestbookServiceServer).AddMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GuestbookService_AddMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuestbookServiceServer).AddMessage(ctx, req.(*AddMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuestbookService_GetMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuestbookServiceServer).GetMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GuestbookService_GetMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuestbookServiceServer).GetMessage(ctx, req.(*GetMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GuestbookService_ServiceDesc is the grpc.ServiceDesc for GuestbookService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GuestbookService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "guestbook.GuestbookService",
	HandlerType: (*GuestbookServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddMessage",
			Handler:    _GuestbookService_AddMessage_Handler,
		},
		{
			MethodName: "GetMessage",
			Handler:    _GuestbookService_GetMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "guestbook.proto",
}
